plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'net.ltgt.errorprone' version '3.1.0'
    id 'net.ltgt.nullaway' version '2.0.0'
}

group 'de.zuellich'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.7.1'
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javafx {
    version = '11.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

spotless {
    java {
        googleJavaFormat()
    }
}

nullaway {
    annotatedPackages.add("de.zuellich.offlinewiktionary")
}

dependencies {
    // Error prone dependencies
    errorprone("com.google.errorprone:error_prone_core:2.27.1")
    errorprone "com.uber.nullaway:nullaway:0.10.26"
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    // end of error prone dependencies

    // https://mvnrepository.com/artifact/org.apache.commons/commons-compress
    implementation 'org.apache.commons:commons-compress:1.26.1'

    testImplementation("org.mockito:mockito-core:5.12.0")
    testImplementation("org.mockito:mockito-junit-jupiter:5.12.0")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

task testParserOnly(type: Test) {
    description "Only run the tests related to the wiki text parser."
    useJUnitPlatform {
        includeTags("MarkupParser")
    }
}

task runFuzzer(type: JavaExec) {
    description "Run the fuzzer on an archive"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'de.zuellich.offlinewiktionary.util.FuzzerApp'
}

tasks.compileJava {
    // For now we are happy without proper logging
    options.errorprone.disable("CatchAndPrintStackTrace")
    // Only really consider null errors for now in CI
    options.errorprone.error("NullAway")
}


mainClassName = 'de.zuellich.offlinewiktionary.core.WiktionaryApp'